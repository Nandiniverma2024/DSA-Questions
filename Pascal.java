import java.util.*;

// Pascal triangle problem solution
class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> result = new ArrayList<>();

        // BaseCase 1
        if(numRows == 0){
            return result;
        }

        List<Integer> firstRow = new ArrayList<>();
        firstRow.add(1);
        result.add(firstRow);

        // BaseCase2
        if(numRows == 1){
            return result;
        }

        for(int i=1; i<numRows; i++){
            // Previous Row
            List<Integer> prevRow = result.get(i-1);
            // newRow
            List<Integer> row = new ArrayList<>();

            row.add(1);
            for(int j=0; j<i-1; j++){
                row.add(prevRow.get(j) + prevRow.get(j+1));
            }
            row.add(1);

            result.add(row);
        }
        return result;
    }
}

// Pascal Triangle code for quiz generation
// Calculates how many unique quizzes can be generated by choosing a fixed number of questions from a larger set of topics.
// Generates a random quiz each time using a shuffled subset of topics.
class Pascal {

    // Method to get total quiz combinations using Pascal's Triangle
    public int getQuizCombination(int n, int r) {
        List<List<Integer>> pascal = generate(n + 1);  // row index starts at 0
        return pascal.get(n).get(r);  // C(n, r)
    }

    // Pascal's Triangle generator up to numRows
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> result = new ArrayList<>();

        if (numRows == 0) return result;

        List<Integer> firstRow = new ArrayList<>();
        firstRow.add(1);
        result.add(firstRow);

        for (int i = 1; i < numRows; i++) {
            List<Integer> prevRow = result.get(i - 1);
            List<Integer> row = new ArrayList<>();
            row.add(1);

            for (int j = 0; j < i - 1; j++) {
                row.add(prevRow.get(j) + prevRow.get(j + 1));
            }

            row.add(1);
            result.add(row);
        }

        return result;
    }

    public static void main(String[] args) {
        Pascal s = new Pascal();

        // Total topics and quiz size
        int totalTopics = 10;
        int quizSize = 5;

        // Step 1: Calculate number of unique quizzes
        int combinations = s.getQuizCombination(totalTopics, quizSize);
        System.out.println("âœ… You can generate " + combinations + " unique 5-topic quizzes from 10 topics.\n");

        // Step 2: List of topics
        List<String> topics = Arrays.asList(
            "Arrays", "OOP", "DBMS", "SQL", "OS",
            "Networks", "Java", "Recursion", "Stack", "Heap"
        );

        // Step 3: Randomly generate a 5-topic quiz
        Collections.shuffle(topics);
        List<String> quiz = topics.subList(0, quizSize);

        // Step 4: Print the quiz
        System.out.println("ðŸ§  Here's your random 5-topic quiz:");
        for (int i = 0; i < quizSize; i++) {
            System.out.println((i + 1) + ". " + quiz.get(i));
        }
    }
}


// DryRun
// Row 0: [1]
// Row 1: [1, 1]
// Row 2: [1, 2, 1]
// Row 3: [1, 3, 3, 1]
// Row 4: [1, 4, 6, 4, 1]
// Row 5: [1, 5,10,10, 5, 1]
// Row 6: [1, 6,15,20,15, 6, 1]
// Row 7: [1, 7,21,35,35,21, 7, 1]
// Row 8: [1, 8,28,56,70,56,28, 8, 1]
// Row 9: [1, 9,36,84,126,126,84,36, 9, 1]
// Row10: [1,10,45,120,210,**252**,210,120,45,10,1]

// getQuizCombination(10, 5)

// pascal.get(10).get(5)
// â†’ returns 252

